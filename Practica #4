/*
   Fundacion Kinal
   Centro educativo tecnico laboral Kinal
   Quinto perito
   Quinto electronica
   Codigo Tecnico: EB5AV 
   Curso: Taller de electronica digital y reparacion de computadoras I
   Proyecto: Uso del RFID
   Dev: Luis Fernando Leiva Quezada
   Fecha: 26 de julio
*/

#include <MFRC522.h>

#define SS_PIN 10
#define RST_PIN 9

MFRC522 rfid(SS_PIN, RST_PIN);

int LedVerde = 4;
int LedRojo = 3;
int buzzer = 5;
byte LecturaUID[4]; 				// crea array para almacenar el UID leido
byte Usuario1[4]= {0xD3, 0x2F, 0x06, 0x80} ;    // UID de tarjeta leido en programa 1

void setup() {
  Serial.begin(9600);
  SPI.begin();				// inicializa bus SPI
  rfid.PCD_Init();
  pinMode(LedVerde, OUTPUT);
  pinMode(LedRojo, OUTPUT);
  pinMode(buzzer, OUTPUT);
  Serial.println("Inicio");
}

void loop() {
  if ( ! rfid.PICC_IsNewCardPresent())		// si no hay una tarjeta presente
    return;						// retorna al loop esperando por una tarjeta
  
  if ( ! rfid.PICC_ReadCardSerial()) 		// si no puede obtener datos de la tarjeta
    return;						// retorna al loop esperando por otra tarjeta
  Serial.print("UID:");				// muestra texto UID:
  for (byte i = 0; i < rfid.uid.size; i++) 
  {	// bucle recorre de a un byte por vez el UID
    if (rfid.uid.uidByte[i] < 0x10)
    {		// si el byte leido es menor a 0x10
      Serial.print(" 0");				// imprime espacio en blanco y numero cero
    }
    else{						// sino
      Serial.print(" ");				// imprime un espacio en blanco
    }
    Serial.print(rfid.uid.uidByte[i], HEX);   	// imprime el byte del UID leido en hexadecimal
    LecturaUID[i]=rfid.uid.uidByte[i];   	// almacena en array el byte del UID leido      
  }  
  if (comparaUID(LecturaUID, Usuario1)) {
    Serial.println();
    Serial.println("Bienvenido!");
    digitalWrite(LedVerde, HIGH);
    buzzPermitido(); // Sonido de verificación
    delay(4000);
    digitalWrite(LedVerde, LOW);
  }else{
    Serial.println();
    Serial.println("Acceso denegado");
    digitalWrite(LedRojo, HIGH);
    buzzDenegado(); // Sonido de acceso denegado
    delay(2000);
    digitalWrite(LedRojo, LOW);
  }
  rfid.PICC_HaltA();
  rfid.PCD_StopCrypto1();   
}

boolean comparaUID(byte lectura[],byte usuario[])	// funcion comparaUID
{
  for (byte i=0; i < rfid.uid.size; i++){		// bucle recorre de a un byte por vez el UID
  if(lectura[i] != usuario[i])				// si byte de UID leido es distinto a usuario
    return(false);					// retorna falso
  }
  return(true);						// si los 4 bytes coinciden retorna verdadero
}

void buzzDenegado() {
  int melody[] = {262, 196, 196, 233, 196, 0, 294, 262}; // Secuencia de tonos para "Acceso denegado"
  int noteDuration = 200; // Duración de cada nota en milisegundos

  for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
    int noteDurationAdjusted = noteDuration;

    // Pausa entre notas
    if (melody[i] == 0) {
      delay(noteDurationAdjusted);
    } else {
      tone(buzzer, melody[i], noteDurationAdjusted);
      delay(noteDurationAdjusted);
    }

    noTone(buzzer);
  }
}

void buzzPermitido() {
  // Reproducir el sonido de "Acceso permitido" en el buzzer
  int melody[] = {659, 880, 698, 784, 698, 659, 587}; // Notas para el melodía
  int noteDuration = 250; // Duración de cada nota en milisegundos

  for (int i = 0; i < 7; i++) {
    int note = melody[i];
    tone(buzzer, note, noteDuration);
    delay(noteDuration);
  }

  noTone(buzzer);
}
